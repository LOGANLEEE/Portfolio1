// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  bobae: (where?: BobaeWhereInput) => Promise<boolean>;
  bullpen: (where?: BullpenWhereInput) => Promise<boolean>;
  clien: (where?: ClienWhereInput) => Promise<boolean>;
  etoland: (where?: EtolandWhereInput) => Promise<boolean>;
  ilbe: (where?: IlbeWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bobae: (where: BobaeWhereUniqueInput) => BobaeNullablePromise;
  bobaes: (args?: {
    where?: BobaeWhereInput;
    orderBy?: BobaeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bobae>;
  bobaesConnection: (args?: {
    where?: BobaeWhereInput;
    orderBy?: BobaeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BobaeConnectionPromise;
  bullpen: (where: BullpenWhereUniqueInput) => BullpenNullablePromise;
  bullpens: (args?: {
    where?: BullpenWhereInput;
    orderBy?: BullpenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bullpen>;
  bullpensConnection: (args?: {
    where?: BullpenWhereInput;
    orderBy?: BullpenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BullpenConnectionPromise;
  clien: (where: ClienWhereUniqueInput) => ClienNullablePromise;
  cliens: (args?: {
    where?: ClienWhereInput;
    orderBy?: ClienOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Clien>;
  cliensConnection: (args?: {
    where?: ClienWhereInput;
    orderBy?: ClienOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClienConnectionPromise;
  etoland: (where: EtolandWhereUniqueInput) => EtolandNullablePromise;
  etolands: (args?: {
    where?: EtolandWhereInput;
    orderBy?: EtolandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Etoland>;
  etolandsConnection: (args?: {
    where?: EtolandWhereInput;
    orderBy?: EtolandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EtolandConnectionPromise;
  ilbe: (where: IlbeWhereUniqueInput) => IlbeNullablePromise;
  ilbes: (args?: {
    where?: IlbeWhereInput;
    orderBy?: IlbeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ilbe>;
  ilbesConnection: (args?: {
    where?: IlbeWhereInput;
    orderBy?: IlbeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IlbeConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBobae: (data: BobaeCreateInput) => BobaePromise;
  updateBobae: (args: {
    data: BobaeUpdateInput;
    where: BobaeWhereUniqueInput;
  }) => BobaePromise;
  updateManyBobaes: (args: {
    data: BobaeUpdateManyMutationInput;
    where?: BobaeWhereInput;
  }) => BatchPayloadPromise;
  upsertBobae: (args: {
    where: BobaeWhereUniqueInput;
    create: BobaeCreateInput;
    update: BobaeUpdateInput;
  }) => BobaePromise;
  deleteBobae: (where: BobaeWhereUniqueInput) => BobaePromise;
  deleteManyBobaes: (where?: BobaeWhereInput) => BatchPayloadPromise;
  createBullpen: (data: BullpenCreateInput) => BullpenPromise;
  updateBullpen: (args: {
    data: BullpenUpdateInput;
    where: BullpenWhereUniqueInput;
  }) => BullpenPromise;
  updateManyBullpens: (args: {
    data: BullpenUpdateManyMutationInput;
    where?: BullpenWhereInput;
  }) => BatchPayloadPromise;
  upsertBullpen: (args: {
    where: BullpenWhereUniqueInput;
    create: BullpenCreateInput;
    update: BullpenUpdateInput;
  }) => BullpenPromise;
  deleteBullpen: (where: BullpenWhereUniqueInput) => BullpenPromise;
  deleteManyBullpens: (where?: BullpenWhereInput) => BatchPayloadPromise;
  createClien: (data: ClienCreateInput) => ClienPromise;
  updateClien: (args: {
    data: ClienUpdateInput;
    where: ClienWhereUniqueInput;
  }) => ClienPromise;
  updateManyCliens: (args: {
    data: ClienUpdateManyMutationInput;
    where?: ClienWhereInput;
  }) => BatchPayloadPromise;
  upsertClien: (args: {
    where: ClienWhereUniqueInput;
    create: ClienCreateInput;
    update: ClienUpdateInput;
  }) => ClienPromise;
  deleteClien: (where: ClienWhereUniqueInput) => ClienPromise;
  deleteManyCliens: (where?: ClienWhereInput) => BatchPayloadPromise;
  createEtoland: (data: EtolandCreateInput) => EtolandPromise;
  updateEtoland: (args: {
    data: EtolandUpdateInput;
    where: EtolandWhereUniqueInput;
  }) => EtolandPromise;
  updateManyEtolands: (args: {
    data: EtolandUpdateManyMutationInput;
    where?: EtolandWhereInput;
  }) => BatchPayloadPromise;
  upsertEtoland: (args: {
    where: EtolandWhereUniqueInput;
    create: EtolandCreateInput;
    update: EtolandUpdateInput;
  }) => EtolandPromise;
  deleteEtoland: (where: EtolandWhereUniqueInput) => EtolandPromise;
  deleteManyEtolands: (where?: EtolandWhereInput) => BatchPayloadPromise;
  createIlbe: (data: IlbeCreateInput) => IlbePromise;
  updateIlbe: (args: {
    data: IlbeUpdateInput;
    where: IlbeWhereUniqueInput;
  }) => IlbePromise;
  updateManyIlbes: (args: {
    data: IlbeUpdateManyMutationInput;
    where?: IlbeWhereInput;
  }) => BatchPayloadPromise;
  upsertIlbe: (args: {
    where: IlbeWhereUniqueInput;
    create: IlbeCreateInput;
    update: IlbeUpdateInput;
  }) => IlbePromise;
  deleteIlbe: (where: IlbeWhereUniqueInput) => IlbePromise;
  deleteManyIlbes: (where?: IlbeWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bobae: (
    where?: BobaeSubscriptionWhereInput
  ) => BobaeSubscriptionPayloadSubscription;
  bullpen: (
    where?: BullpenSubscriptionWhereInput
  ) => BullpenSubscriptionPayloadSubscription;
  clien: (
    where?: ClienSubscriptionWhereInput
  ) => ClienSubscriptionPayloadSubscription;
  etoland: (
    where?: EtolandSubscriptionWhereInput
  ) => EtolandSubscriptionPayloadSubscription;
  ilbe: (
    where?: IlbeSubscriptionWhereInput
  ) => IlbeSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BobaeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type BullpenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ClienOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type EtolandOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type IlbeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BobaeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BobaeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BobaeWhereInput[] | BobaeWhereInput>;
  OR?: Maybe<BobaeWhereInput[] | BobaeWhereInput>;
  NOT?: Maybe<BobaeWhereInput[] | BobaeWhereInput>;
}

export type BullpenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BullpenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BullpenWhereInput[] | BullpenWhereInput>;
  OR?: Maybe<BullpenWhereInput[] | BullpenWhereInput>;
  NOT?: Maybe<BullpenWhereInput[] | BullpenWhereInput>;
}

export type ClienWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClienWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClienWhereInput[] | ClienWhereInput>;
  OR?: Maybe<ClienWhereInput[] | ClienWhereInput>;
  NOT?: Maybe<ClienWhereInput[] | ClienWhereInput>;
}

export type EtolandWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EtolandWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EtolandWhereInput[] | EtolandWhereInput>;
  OR?: Maybe<EtolandWhereInput[] | EtolandWhereInput>;
  NOT?: Maybe<EtolandWhereInput[] | EtolandWhereInput>;
}

export type IlbeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface IlbeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IlbeWhereInput[] | IlbeWhereInput>;
  OR?: Maybe<IlbeWhereInput[] | IlbeWhereInput>;
  NOT?: Maybe<IlbeWhereInput[] | IlbeWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface BobaeCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface BobaeUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface BobaeUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface BullpenCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface BullpenUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface BullpenUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface ClienCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface ClienUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface ClienUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface EtolandCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface EtolandUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface EtolandUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface IlbeCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface IlbeUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface IlbeUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface BobaeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BobaeWhereInput>;
  AND?: Maybe<BobaeSubscriptionWhereInput[] | BobaeSubscriptionWhereInput>;
  OR?: Maybe<BobaeSubscriptionWhereInput[] | BobaeSubscriptionWhereInput>;
  NOT?: Maybe<BobaeSubscriptionWhereInput[] | BobaeSubscriptionWhereInput>;
}

export interface BullpenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BullpenWhereInput>;
  AND?: Maybe<BullpenSubscriptionWhereInput[] | BullpenSubscriptionWhereInput>;
  OR?: Maybe<BullpenSubscriptionWhereInput[] | BullpenSubscriptionWhereInput>;
  NOT?: Maybe<BullpenSubscriptionWhereInput[] | BullpenSubscriptionWhereInput>;
}

export interface ClienSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClienWhereInput>;
  AND?: Maybe<ClienSubscriptionWhereInput[] | ClienSubscriptionWhereInput>;
  OR?: Maybe<ClienSubscriptionWhereInput[] | ClienSubscriptionWhereInput>;
  NOT?: Maybe<ClienSubscriptionWhereInput[] | ClienSubscriptionWhereInput>;
}

export interface EtolandSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EtolandWhereInput>;
  AND?: Maybe<EtolandSubscriptionWhereInput[] | EtolandSubscriptionWhereInput>;
  OR?: Maybe<EtolandSubscriptionWhereInput[] | EtolandSubscriptionWhereInput>;
  NOT?: Maybe<EtolandSubscriptionWhereInput[] | EtolandSubscriptionWhereInput>;
}

export interface IlbeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IlbeWhereInput>;
  AND?: Maybe<IlbeSubscriptionWhereInput[] | IlbeSubscriptionWhereInput>;
  OR?: Maybe<IlbeSubscriptionWhereInput[] | IlbeSubscriptionWhereInput>;
  NOT?: Maybe<IlbeSubscriptionWhereInput[] | IlbeSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Bobae {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface BobaePromise extends Promise<Bobae>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BobaeSubscription
  extends Promise<AsyncIterator<Bobae>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BobaeNullablePromise
  extends Promise<Bobae | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BobaeConnection {
  pageInfo: PageInfo;
  edges: BobaeEdge[];
}

export interface BobaeConnectionPromise
  extends Promise<BobaeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BobaeEdge>>() => T;
  aggregate: <T = AggregateBobaePromise>() => T;
}

export interface BobaeConnectionSubscription
  extends Promise<AsyncIterator<BobaeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BobaeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBobaeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BobaeEdge {
  node: Bobae;
  cursor: String;
}

export interface BobaeEdgePromise extends Promise<BobaeEdge>, Fragmentable {
  node: <T = BobaePromise>() => T;
  cursor: () => Promise<String>;
}

export interface BobaeEdgeSubscription
  extends Promise<AsyncIterator<BobaeEdge>>,
    Fragmentable {
  node: <T = BobaeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBobae {
  count: Int;
}

export interface AggregateBobaePromise
  extends Promise<AggregateBobae>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBobaeSubscription
  extends Promise<AsyncIterator<AggregateBobae>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Bullpen {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface BullpenPromise extends Promise<Bullpen>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BullpenSubscription
  extends Promise<AsyncIterator<Bullpen>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BullpenNullablePromise
  extends Promise<Bullpen | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BullpenConnection {
  pageInfo: PageInfo;
  edges: BullpenEdge[];
}

export interface BullpenConnectionPromise
  extends Promise<BullpenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BullpenEdge>>() => T;
  aggregate: <T = AggregateBullpenPromise>() => T;
}

export interface BullpenConnectionSubscription
  extends Promise<AsyncIterator<BullpenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BullpenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBullpenSubscription>() => T;
}

export interface BullpenEdge {
  node: Bullpen;
  cursor: String;
}

export interface BullpenEdgePromise extends Promise<BullpenEdge>, Fragmentable {
  node: <T = BullpenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BullpenEdgeSubscription
  extends Promise<AsyncIterator<BullpenEdge>>,
    Fragmentable {
  node: <T = BullpenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBullpen {
  count: Int;
}

export interface AggregateBullpenPromise
  extends Promise<AggregateBullpen>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBullpenSubscription
  extends Promise<AsyncIterator<AggregateBullpen>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Clien {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface ClienPromise extends Promise<Clien>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ClienSubscription
  extends Promise<AsyncIterator<Clien>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClienNullablePromise
  extends Promise<Clien | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ClienConnection {
  pageInfo: PageInfo;
  edges: ClienEdge[];
}

export interface ClienConnectionPromise
  extends Promise<ClienConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClienEdge>>() => T;
  aggregate: <T = AggregateClienPromise>() => T;
}

export interface ClienConnectionSubscription
  extends Promise<AsyncIterator<ClienConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClienEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClienSubscription>() => T;
}

export interface ClienEdge {
  node: Clien;
  cursor: String;
}

export interface ClienEdgePromise extends Promise<ClienEdge>, Fragmentable {
  node: <T = ClienPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClienEdgeSubscription
  extends Promise<AsyncIterator<ClienEdge>>,
    Fragmentable {
  node: <T = ClienSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClien {
  count: Int;
}

export interface AggregateClienPromise
  extends Promise<AggregateClien>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClienSubscription
  extends Promise<AsyncIterator<AggregateClien>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Etoland {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface EtolandPromise extends Promise<Etoland>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EtolandSubscription
  extends Promise<AsyncIterator<Etoland>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EtolandNullablePromise
  extends Promise<Etoland | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EtolandConnection {
  pageInfo: PageInfo;
  edges: EtolandEdge[];
}

export interface EtolandConnectionPromise
  extends Promise<EtolandConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EtolandEdge>>() => T;
  aggregate: <T = AggregateEtolandPromise>() => T;
}

export interface EtolandConnectionSubscription
  extends Promise<AsyncIterator<EtolandConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EtolandEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEtolandSubscription>() => T;
}

export interface EtolandEdge {
  node: Etoland;
  cursor: String;
}

export interface EtolandEdgePromise extends Promise<EtolandEdge>, Fragmentable {
  node: <T = EtolandPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EtolandEdgeSubscription
  extends Promise<AsyncIterator<EtolandEdge>>,
    Fragmentable {
  node: <T = EtolandSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEtoland {
  count: Int;
}

export interface AggregateEtolandPromise
  extends Promise<AggregateEtoland>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEtolandSubscription
  extends Promise<AsyncIterator<AggregateEtoland>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ilbe {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface IlbePromise extends Promise<Ilbe>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IlbeSubscription
  extends Promise<AsyncIterator<Ilbe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IlbeNullablePromise
  extends Promise<Ilbe | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IlbeConnection {
  pageInfo: PageInfo;
  edges: IlbeEdge[];
}

export interface IlbeConnectionPromise
  extends Promise<IlbeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IlbeEdge>>() => T;
  aggregate: <T = AggregateIlbePromise>() => T;
}

export interface IlbeConnectionSubscription
  extends Promise<AsyncIterator<IlbeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IlbeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIlbeSubscription>() => T;
}

export interface IlbeEdge {
  node: Ilbe;
  cursor: String;
}

export interface IlbeEdgePromise extends Promise<IlbeEdge>, Fragmentable {
  node: <T = IlbePromise>() => T;
  cursor: () => Promise<String>;
}

export interface IlbeEdgeSubscription
  extends Promise<AsyncIterator<IlbeEdge>>,
    Fragmentable {
  node: <T = IlbeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIlbe {
  count: Int;
}

export interface AggregateIlbePromise
  extends Promise<AggregateIlbe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIlbeSubscription
  extends Promise<AsyncIterator<AggregateIlbe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BobaeSubscriptionPayload {
  mutation: MutationType;
  node: Bobae;
  updatedFields: String[];
  previousValues: BobaePreviousValues;
}

export interface BobaeSubscriptionPayloadPromise
  extends Promise<BobaeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BobaePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BobaePreviousValuesPromise>() => T;
}

export interface BobaeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BobaeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BobaeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BobaePreviousValuesSubscription>() => T;
}

export interface BobaePreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface BobaePreviousValuesPromise
  extends Promise<BobaePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BobaePreviousValuesSubscription
  extends Promise<AsyncIterator<BobaePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BullpenSubscriptionPayload {
  mutation: MutationType;
  node: Bullpen;
  updatedFields: String[];
  previousValues: BullpenPreviousValues;
}

export interface BullpenSubscriptionPayloadPromise
  extends Promise<BullpenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BullpenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BullpenPreviousValuesPromise>() => T;
}

export interface BullpenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BullpenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BullpenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BullpenPreviousValuesSubscription>() => T;
}

export interface BullpenPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface BullpenPreviousValuesPromise
  extends Promise<BullpenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BullpenPreviousValuesSubscription
  extends Promise<AsyncIterator<BullpenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClienSubscriptionPayload {
  mutation: MutationType;
  node: Clien;
  updatedFields: String[];
  previousValues: ClienPreviousValues;
}

export interface ClienSubscriptionPayloadPromise
  extends Promise<ClienSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClienPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClienPreviousValuesPromise>() => T;
}

export interface ClienSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClienSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClienSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClienPreviousValuesSubscription>() => T;
}

export interface ClienPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface ClienPreviousValuesPromise
  extends Promise<ClienPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ClienPreviousValuesSubscription
  extends Promise<AsyncIterator<ClienPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EtolandSubscriptionPayload {
  mutation: MutationType;
  node: Etoland;
  updatedFields: String[];
  previousValues: EtolandPreviousValues;
}

export interface EtolandSubscriptionPayloadPromise
  extends Promise<EtolandSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EtolandPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EtolandPreviousValuesPromise>() => T;
}

export interface EtolandSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EtolandSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EtolandSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EtolandPreviousValuesSubscription>() => T;
}

export interface EtolandPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface EtolandPreviousValuesPromise
  extends Promise<EtolandPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EtolandPreviousValuesSubscription
  extends Promise<AsyncIterator<EtolandPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IlbeSubscriptionPayload {
  mutation: MutationType;
  node: Ilbe;
  updatedFields: String[];
  previousValues: IlbePreviousValues;
}

export interface IlbeSubscriptionPayloadPromise
  extends Promise<IlbeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IlbePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IlbePreviousValuesPromise>() => T;
}

export interface IlbeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IlbeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IlbeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IlbePreviousValuesSubscription>() => T;
}

export interface IlbePreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface IlbePreviousValuesPromise
  extends Promise<IlbePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IlbePreviousValuesSubscription
  extends Promise<AsyncIterator<IlbePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Bobae",
    embedded: false
  },
  {
    name: "Clien",
    embedded: false
  },
  {
    name: "Ilbe",
    embedded: false
  },
  {
    name: "Bullpen",
    embedded: false
  },
  {
    name: "Etoland",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
